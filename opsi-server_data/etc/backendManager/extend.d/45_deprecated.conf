# -*- coding: utf-8 -*-

#
# DEPRECATED METHODS
# ------------------
#
# This module contains methods that are marked as deprecated.
# They will be removed with the next major release or minor release.
#
# If you are making use of these methods you should replace their usage.
# If there is an easy way to replace the calls a call to a deprecated
# method will issue an warning with information on what method can be
# used instead.
#

@deprecated(alternative_method='backend_createBase')
def createOpsiBase(self):
	self.backend_createBase()


@deprecated(alternative_method='host_createOpsiConfigserver')
def createServer(self, serverName, domain, description=None, notes=None):
	id = forceHostId('.'.join((forceHostname(serverName), forceDomain(domain))))
	self.host_createOpsiConfigserver(id=id, description=description, notes=notes)
	return id


@deprecated(alternative_method='host_delete')
def deleteClient(self, clientId):
	self.host_delete(id=forceHostId(clientId))


@deprecated(alternative_method='host_delete')
def deleteDepot(self, depotId):
	self.host_delete(id=forceHostId(depotId))


@deprecated(alternative_method='group_delete')
def deleteGroup(self, groupId):
	self.group_delete(id=groupId)


@deprecated
def deleteProductDependency(self, productId, action="", requiredProductId="", requiredProductClassId="", requirementType="", depotIds=[]):
	if not action:
		action = None
	if not requiredProductId:
		requiredProductId = None
	if not depotIds:
		depotIds = []

	# Warn users relying on obsolete attributes
	if requiredProductClassId:
		logger.warning("The argument 'requiredProductClassId' is obsolete and has no effect.")
	if requirementType:
		logger.warning("The argument 'requirementType' is obsolete and has no effect.")

	for productOnDepot in self.productOnDepot_getObjects(productId=productId, depotId=depotIds):
		self.productDependency_delete(
			productId=productOnDepot.productId,
			productVersion=productOnDepot.productVersion,
			packageVersion=productOnDepot.packageVersion,
			productAction=action,
			requiredProductId=requiredProductId
		)


@deprecated(alternative_method='host_delete')
def deleteServer(self, serverId):
	self.host_delete(id=forceHostId(serverId))


@deprecated
def setHostLastSeen(self, hostId, timestamp):
	hostId = forceHostId(hostId)
	hosts = self.host_getObjects(id=hostId)
	if not hosts:
		raise BackendMissingDataError("Host '%s' not found" % hostId)
	hosts[0].setLastSeen(timestamp)
	self.host_updateObject(hosts[0])


@deprecated(alternative_method='getClients')
def getClients_listOfHashes(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	if serverId or depotIds or groupId or productId or installationStatus or actionRequest or productVersion or packageVersion or hwFilter:
		raise RuntimeError("These parameters have been deprecated")

	return self.getClients()


@deprecated(alternative_method='getClientIDs')
def getClientIds_list(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	if not (serverId or depotIds or groupId or productId or installationStatus or actionRequest or productVersion or packageVersion or hwFilter):
		return self.getClientIDs()
	if depotIds:
		return self.getClientsOnDepot(depotIds)
	if productId and installationStatus:
		return self.getClientsWithProducts(productId, installationStatus=installationStatus)
	if productId:
		return self.getClientsWithProducts(productId)
	if actionRequest:
		return self.getClientsWithActionRequest(actionRequest)

	raise RuntimeError("Missing parameters for mapping getClientIds_list to replacing method.")
