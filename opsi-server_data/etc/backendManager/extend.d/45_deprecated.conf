# -*- coding: utf-8 -*-

#
# DEPRECATED METHODS
# ------------------
#
# This module contains methods that are marked as deprecated.
# They will be removed with the next major release or minor release.
#
# If you are making use of these methods you should replace their usage.
# If there is an easy way to replace the calls a call to a deprecated
# method will issue an warning with information on what method can be
# used instead.
#

def _deprecationWarning(self, methodName, alternativeMethod=''):
	"""
	Issues a deprecation warning.

	:param methodName: Name of the method that gets deprecated.
	:type methodName: str
	:param alternativeMethod: Name of an alternative method that can be used.
	:type alternativeMethod: str
	"""
	if alternativeMethod:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
			"Please use the method '{}' instead."
		).format(methodName, alternativeMethod)
	else:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
		).format(methodName)

	logger.warning(message)


def createOpsiBase(self):
	self._deprecationWarning('createOpsiBase', 'backend_createBase')
	self.backend_createBase()


def createServer(self, serverName, domain, description=None, notes=None):
	self._deprecationWarning('createServer', 'host_createOpsiConfigserver')
	id = forceHostId(u'.'.join((forceHostname(serverName), forceDomain(domain))))
	self.host_createOpsiConfigserver(id=id, description=description, notes=notes)
	return id


def deleteClient(self, clientId):
	self._deprecationWarning('deleteClient', 'host_delete')
	self.host_delete(id=forceHostId(clientId))


def deleteDepot(self, depotId):
	self._deprecationWarning('deleteDepot', 'host_delete')
	self.host_delete(id=forceHostId(depotId))


def deleteGroup(self, groupId):
	self._deprecationWarning('deleteGroup', 'group_delete')
	self.group_delete(id=groupId)


def deleteProductDependency(self, productId, action="", requiredProductId="", requiredProductClassId="", requirementType="", depotIds=[]):
	self._deprecationWarning('deleteProductDependency')
	if not action:
		action = None
	if not requiredProductId:
		requiredProductId = None
	if not depotIds:
		depotIds = []

	# Warn users relying on obsolete attributes
	if requiredProductClassId:
		logger.warning("The argument 'requiredProductClassId' is obsolete and has no effect.")
	if requirementType:
		logger.warning("The argument 'requirementType' is obsolete and has no effect.")

	for productOnDepot in self.productOnDepot_getObjects(productId=productId, depotId=depotIds):
		self.productDependency_delete(
			productId=productOnDepot.productId,
			productVersion=productOnDepot.productVersion,
			packageVersion=productOnDepot.packageVersion,
			productAction=action,
			requiredProductId=requiredProductId
		)


def deleteServer(self, serverId):
	self._deprecationWarning('deleteServer', 'host_delete')
	self.host_delete(id=forceHostId(serverId))


def setHostLastSeen(self, hostId, timestamp):
	self._deprecationWarning('setHostLastSeen')
	hostId = forceHostId(hostId)
	hosts = self.host_getObjects(id=hostId)
	if not hosts:
		raise BackendMissingDataError(u"Host '%s' not found" % hostId)
	hosts[0].setLastSeen(timestamp)
	self.host_updateObject(hosts[0])


def getClients_listOfHashes(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	self._deprecationWarning('getClients_listOfHashes', 'getClients')
	if serverId or depotIds or groupId or productId or installationStatus or actionRequest or productVersion or packageVersion or hwFilter:
		raise RuntimeError("These parameters have been deprecated")

	return self.getClients()


def getClientIds_list(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	if not (serverId or depotIds or groupId or productId or installationStatus or actionRequest or productVersion or packageVersion or hwFilter):
		self._deprecationWarning('getClientIds_list', 'getClientIDs')
		return self.getClientIDs()
	elif depotIds:
		self._deprecationWarning('getClientIds_list', 'getClientsOnDepot')
		return self.getClientsOnDepot(depotIds)
	elif productId and installationStatus:
		self._deprecationWarning('getClientIds_list', 'getClientsWithProducts')
		return self.getClientsWithProducts(productId, installationStatus=installationStatus)
	elif productId:
		self._deprecationWarning('getClientIds_list', 'getClientsWithProducts')
		return self.getClientsWithProducts(productId)
	elif actionRequest:
		self._deprecationWarning('getClientIds_list', 'getClientsWithActionRequest')
		return self.getClientsWithActionRequest(actionRequest)

	self._deprecationWarning('getClientIds_list')
	raise RuntimeError("Missing parameters for mapping getClients_listOfHashes to replacing method.")
