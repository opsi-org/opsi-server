# -*- coding: utf-8 -*-

def _getSSHCommandFilenames(self):
	return [self._getSSHCommandDefaultFilename(), self._getSSHCommandCustomFilename()]

def _getSSHCommandDefaultFilename(self):
	return forceUnicode(u'/etc/opsi/server_commands_default.conf')

def _getSSHCommandCustomFilename(self):
	return forceUnicode(u'/var/lib/opsi/server_commands_custom.conf')

def SSHCommand_getObject(self, menuText):
	existingCommands = self.SSHCommand_getObjects()
	menuText = forceUnicode(menuText)
	for command in existingCommands:
		if command["menuText"] == menuText:
			return command
	return None

def _isBuiltIn(self, index):
	return index == 0

def SSHCommand_getObjects(self):
	import codecs
	import json
	import os

	def readFilecontent(filename, buildIn=False):
		filecontent = {}
		try:
			if os.path.getsize(filename) <= 0:
				logger.debug(u'Command file {0!r} is empty', filename)
				return {}

			with codecs.open(filename, 'r', 'utf-8') as f:
				for line in f:
					logger.debug2(u'line: {0}'.format(line))
					newElement = json.loads(line)
					logger.debug2(u'new element {0}'.format(newElement))
					try:
						filecontent[newElement["id"]] = newElement
						if buildIn:
							filecontent[newElement["id"]]["buildIn"] = True
						self._forceCommandDict(newElement)
					except KeyError:
						logger.error(u'id does not exist. Continuing.')
						pass

					logger.debug2(u'{0}'.format(filecontent))
		except OSError as oserr:
			if oserr.errno != 2:  # 2 is No such file or directory
				logger.notice(u' Problem accessing {0}: {1}', filename, oserr)
				logger.logException(ve)
		except ValueError as ve:
			logger.notice(u' ValueError can not load file {0}'.format(filename))
			logger.logException(ve)
		except Exception as e:
			logger.notice(u' Exception with file {0}'.format(filename))
			logger.logException(e)

		return filecontent

	all_commands = {}
	for index, name in enumerate(self._getSSHCommandFilenames()):
		logger.debug("Parsing {0}", name)
		commands = readFilecontent(str(name), self._isBuiltIn(index))
		for key, value in commands.items():
			all_commands[forceUnicode(key)] = forceDict(value)

	return list(all_commands.values())

def SSHCommand_createObjects(self, commandList):
	commandList = forceList(commandList)
	for command in commandList:
		self._forceCommandDict(command)
		command = self._getCommandDictWithDefaults(command)
		command = self._setDefaults(command)
		self._forceCommandDict(command)

	for com in commandList:
		self._writeSSHCommand(com)

	return self.SSHCommand_getObjects()

def _generateSSHCommandId(self, menuText):
	if not menuText:
		raise ValueError(u'menuText missing')
	return menuText.lower().replace(" ", "_")

def SSHCommand_createObject(self, menuText, commands=[], position=0, needSudo=False, tooltipText=u'', parentMenuText=None):
	com = self._createCommandDict(menuText, commands, position, needSudo, tooltipText, parentMenuText)
	logger.notice(u'Creating SSH command: {0}', com)
	self._forceCommandDict(com)
	self._writeSSHCommand(com)
	return self.SSHCommand_getObjects()

def SSHCommand_updateObject(self, menuText, commands=None, position=None, needSudo=None, tooltipText=None, parentMenuText=None):
	com = self._createCommandDict(menuText, commands, position, needSudo, tooltipText, parentMenuText)
	self._forceCommandDict(com)
	self._writeSSHCommand(com, True)
	return self.SSHCommand_getObjects()

def SSHCommand_updateObjects(self, commandList):
	commandList = forceList(commandList)
	if not commandList:
		raise ValueError(u'commandList needs at least 1 command')

	for com in commandList:
		logger.debug(u'Forcing commands in commandlist')
		self._forceCommandDict(com)

	for com in commandList:
		self._writeSSHCommand(com, True)

	return self.SSHCommand_getObjects()

def SSHCommand_deleteObjects(self, menuTextList):
	menuTextList = forceUnicodeList(menuTextList)
	if not menuTextList:
		raise ValueError(u'menuTextList needs at least 1 menuText')

	for menuText in menuTextList:
		self.SSHCommand_deleteObject(menuText)

	return self.SSHCommand_getObjects()

def SSHCommand_deleteObject(self, menuText):
	logger.notice(u'Deleting SSH command {0!r}', menuText)
	menuText = forceUnicode(menuText)
	existingCommands = self.SSHCommand_getObjects()
	logger.debug(u'SSHCommand_deleteObject existingCommands {0!r}', existingCommands)

	found = False
	indexDel = 0
	my_item = next((item for item in existingCommands if item["menuText"] == menuText), None)
	if my_item is not None:
		found = True
		if not my_item.get("buildIn", False):
			logger.debug(u'SSHCommand_deleteObject {0!r}', menuText)
			indexDel = existingCommands.index(my_item)

	if not found:
		raise ValueError(u'Command does not exists')
	else:
		del existingCommands[indexDel]
		logger.debug(u'SSHCommand_deleteObject new existingCommands {0!r}', existingCommands)
		self._writeSSHCommandFileWith(existingCommands)

	return self.SSHCommand_getObjects()

def _setDefaults(self, command):
	command = forceDict(command)
	if not command.get("menuText", False):
		raise ValueError(u'menuText missing')
	if not command.get("needSudo", False):
		command["needSudo"] = False
	if command["needSudo"] is None:
		command["needSudo"] = False
	logger.debug(u'command[needSudo] {0}', command["needSudo"])
	if not command.get("position", False):
		command["position"] = 0
	if command["position"] is None:
		command["position"] = 0
	logger.debug(u'command[position] {0}', command["position"])
	if not command.get("tooltipText", False):
		command["tooltipText"] = u''
	if command["tooltipText"] is None:
		command["tooltipText"] = u''
	logger.debug(u'command[tooltipText] {0}', command["tooltipText"])
	if not command.get("parentMenuText", False):
		command["parentMenuText"] = None
	logger.debug(u'command[parentMenuText] {0}', command["parentMenuText"])
	if not command.get("id", False):
		command["id"] = self._generateSSHCommandId(command.get("menuText"))
	logger.debug(u'command[id] {0}', command["id"])
	return command

def _getCommandDictWithDefaults(self, command):
	command = forceDict(command)
	command["needSudo"] = command.get("needSudo", False)
	command["position"] = command.get("position", 0)
	command["tooltipText"] = command.get("tooltipText", u'')
	command["parentMenuText"] = command.get("parentMenuText", None)
	command["id"] = command.get("id", self._generateSSHCommandId(command["menuText"]))
	return command

def _createCommandDict(self, menuText, commands, position, needSudo ,tooltipText, parentMenuText):
	if menuText is None:
		raise ValueError(u'menuText cannot be None')
	if commands is None:
		raise ValueError(u'commands cannot be None')

	menuText = forceUnicode(menuText)
	command = {
		"menuText": menuText,
		"commands": forceUnicodeList(commands),
		"tooltipText": forceUnicode(tooltipText or ''),
		"parentMenuText": parentMenuText,
		"id": self._generateSSHCommandId(menuText)
	}

	if needSudo:
		command["needSudo"] = forceBool(needSudo)
	if position:
		command["position"] = forceInt(position)

	return command

def _forceCommandDict(self, c):
	logger.debug2(u'force command dict {0}', c)
	c["menuText"] = forceUnicode(c["menuText"])

	if c.get("commands"):
		c["commands"] = forceUnicodeList(c["commands"])
		if not c["commands"]:
			raise ValueError(u'"commands" needs at least 1 command')
	else:
		raise ValueError(u'"commands" needs at least 1 command')

	if c.get("position"):
		if not isinstance(c["position"], int):
			raise ValueError(u'position should be from type int')
		c["position"] = forceInt(c["position"])
	if c.get("needSudo"):
		if not isinstance(c["needSudo"], bool):
			raise ValueError(u'needSudo should be from type bool')
		c["needSudo"] = forceBool(c["needSudo"])

	for possibleKey in ("id", "tooltipText", "parentMenuText"):
		if c.get(possibleKey):
			c[possibleKey] = forceUnicode(c[possibleKey])

	logger.debug2(u'forced command dict {0}', c)

def _writeSSHCommand(self, command, overwrite=False, mode="w"):
	def createCommandDict(c):
		c = forceDict(c)
		c = self._setDefaults(c)
		self._forceCommandDict(c)
		return c

	existingCommands = self.SSHCommand_getObjects()
	exists = False
	logger.debug(u'_writeSSHCommand overwrite={0} command={1}', overwrite, command)
	for existingCommand in existingCommands:
		if command["menuText"] == existingCommand["menuText"]:
			logger.debug(u'found command with same menuText ')
			logger.debug(u'old command: {0}'.format(existingCommand))
			logger.debug(u'new command: {0}'.format(command))
			exists = True
			if overwrite:
				for key, value in command.items():
					logger.debug(u'parsing newCommand: {0}:{1}', key, value)
					if value or value is not "None":
						if existingCommand[key] == value:
							logger.notice(u'Not Overwrite key {0} ({1}) == {2}', key, existingCommand[key], value)
						else:
							logger.notice(u'Overwrite key {0} ({1}) with {2}', key, existingCommand[key], value)
							existingCommand[key] = value
							if existingCommand.get("buildIn"):
								del existingCommand["buildIn"]

	if exists and not overwrite:
		raise ValueError(u'Command already exists')
	elif not exists:
		try:
			logger.info(u'Command does not exist. Trying to create.')
			logger.debug(u'Command {0!r}', command)
			newCom = createCommandDict(command)
			logger.debug(u'Creating command: {0!r}', newCom)
			existingCommands.append(newCom)
		except Exception as creationError:
			logger.logException(creationError)
			logger.error(u'error while creating new command: {0}', creationError)
	self._writeSSHCommandFileWith(existingCommands)

def _writeSSHCommandFileWith(self, content, mode='w'):
	import codecs
	import json

	with codecs.open(self._getSSHCommandCustomFilename(), mode, 'utf-8') as f:
		try:
			for element in content:
				if element:
					if not element.get("buildIn", False):
						json.dump(element, f)
						f.write('\n')
		except Exception as error:
			logger.logException(error)
			logger.notice(u'error while writing content: {0}', content)
