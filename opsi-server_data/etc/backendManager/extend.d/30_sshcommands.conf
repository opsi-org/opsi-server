# -*- coding: utf-8 -*-

def _getSSHCommandFilenames(self):
	return [self._getSSHCommandDefaultFilename(), self._getSSHCommandCustomFilename()]

def _getSSHCommandDefaultFilename(self):
	return forceUnicode('/etc/opsi/server_commands_default.conf')

def _getSSHCommandCustomFilename(self):
	return forceUnicode('/var/lib/opsi/server_commands_custom.conf')

def SSHCommand_getObject(self, menuText):
	existingCommands = self.SSHCommand_getObjects()
	menuText = forceUnicode(menuText)
	for command in existingCommands:
		if command["menuText"] == menuText:
			return command
	return None

def _isBuiltIn(self, index):
	return index == 0

def SSHCommand_getObjects(self):
	import codecs
	import json
	import os

	def readFilecontent(filename, buildIn=False):
		filecontent = {}
		try:
			if os.path.getsize(filename) <= 0:
				logger.debug('Command file %s is empty', filename)
				return {}

			with codecs.open(filename, 'r', 'utf-8') as f:
				for line in f:
					logger.trace('line: %s', line)
					newElement = json.loads(line)
					logger.trace('new element %s', newElement)
					try:
						filecontent[newElement["id"]] = newElement
						if buildIn:
							filecontent[newElement["id"]]["buildIn"] = True
						self._forceCommandDict(newElement)
					except KeyError:
						logger.error('id does not exist. Continuing.')
						pass

					logger.trace(filecontent)
		except OSError as oserr:
			if oserr.errno != 2:  # 2 is No such file or directory
				logger.notice(' Problem accessing %s: %s', filename, oserr)
				logger.error(oserr, exc_info=True)
		except ValueError as ve:
			logger.notice(' ValueError can not load file %s', filename)
			logger.error(ve, exc_info=True)
		except Exception as e:
			logger.notice(' Exception with file %s', filename)
			logger.error(e, exc_info=True)

		return filecontent

	all_commands = {}
	for index, name in enumerate(self._getSSHCommandFilenames()):
		logger.debug("Parsing %s", name)
		commands = readFilecontent(str(name), self._isBuiltIn(index))
		for key, value in commands.items():
			all_commands[forceUnicode(key)] = forceDict(value)

	return list(all_commands.values())

def SSHCommand_createObjects(self, commandList):
	commandList = forceList(commandList)
	for command in commandList:
		self._forceCommandDict(command)
		command = self._getCommandDictWithDefaults(command)
		command = self._setDefaults(command)
		self._forceCommandDict(command)

	for com in commandList:
		self._writeSSHCommand(com)

	return self.SSHCommand_getObjects()

def _generateSSHCommandId(self, menuText):
	if not menuText:
		raise ValueError('menuText missing')
	return menuText.lower().replace(" ", "_")

def SSHCommand_createObject(self, menuText, commands=[], position=0, needSudo=False, tooltipText='', parentMenuText=None):
	com = self._createCommandDict(menuText, commands, position, needSudo, tooltipText, parentMenuText)
	logger.notice('Creating SSH command: %s', com)
	self._forceCommandDict(com)
	self._writeSSHCommand(com)
	return self.SSHCommand_getObjects()

def SSHCommand_updateObject(self, menuText, commands=None, position=None, needSudo=None, tooltipText=None, parentMenuText=None):
	com = self._createCommandDict(menuText, commands, position, needSudo, tooltipText, parentMenuText)
	self._forceCommandDict(com)
	self._writeSSHCommand(com, True)
	return self.SSHCommand_getObjects()

def SSHCommand_updateObjects(self, commandList):
	commandList = forceList(commandList)
	if not commandList:
		raise ValueError('commandList needs at least 1 command')

	for com in commandList:
		logger.debug('Forcing commands in commandlist')
		self._forceCommandDict(com)

	for com in commandList:
		self._writeSSHCommand(com, True)

	return self.SSHCommand_getObjects()

def SSHCommand_deleteObjects(self, menuTextList):
	menuTextList = forceUnicodeList(menuTextList)
	if not menuTextList:
		raise ValueError('menuTextList needs at least 1 menuText')

	for menuText in menuTextList:
		self.SSHCommand_deleteObject(menuText)

	return self.SSHCommand_getObjects()

def SSHCommand_deleteObject(self, menuText):
	logger.notice('Deleting SSH command %s', menuText)
	menuText = forceUnicode(menuText)
	existingCommands = self.SSHCommand_getObjects()
	logger.debug('SSHCommand_deleteObject existingCommands %s', existingCommands)

	found = False
	indexDel = 0
	my_item = next((item for item in existingCommands if item["menuText"] == menuText), None)
	if my_item is not None:
		found = True
		if not my_item.get("buildIn", False):
			logger.debug('SSHCommand_deleteObject %s', menuText)
			indexDel = existingCommands.index(my_item)

	if not found:
		raise ValueError('Command does not exists')
	else:
		del existingCommands[indexDel]
		logger.debug('SSHCommand_deleteObject new existingCommands %s', existingCommands)
		self._writeSSHCommandFileWith(existingCommands)

	return self.SSHCommand_getObjects()

def _setDefaults(self, command):
	command = forceDict(command)
	if not command.get("menuText", False):
		raise ValueError('menuText missing')
	if not command.get("needSudo", False):
		command["needSudo"] = False
	if command["needSudo"] is None:
		command["needSudo"] = False
	logger.debug('command[needSudo] %s', command["needSudo"])
	if not command.get("position", False):
		command["position"] = 0
	if command["position"] is None:
		command["position"] = 0
	logger.debug('command[position] %s', command["position"])
	if not command.get("tooltipText", False):
		command["tooltipText"] = ''
	if command["tooltipText"] is None:
		command["tooltipText"] = ''
	logger.debug('command[tooltipText] %s', command["tooltipText"])
	if not command.get("parentMenuText", False):
		command["parentMenuText"] = None
	logger.debug('command[parentMenuText] %s', command["parentMenuText"])
	if not command.get("id", False):
		command["id"] = self._generateSSHCommandId(command.get("menuText"))
	logger.debug('command[id] %s', command["id"])
	return command

def _getCommandDictWithDefaults(self, command):
	command = forceDict(command)
	command["needSudo"] = command.get("needSudo", False)
	command["position"] = command.get("position", 0)
	command["tooltipText"] = command.get("tooltipText", '')
	command["parentMenuText"] = command.get("parentMenuText", None)
	command["id"] = command.get("id", self._generateSSHCommandId(command["menuText"]))
	return command

def _createCommandDict(self, menuText, commands, position, needSudo ,tooltipText, parentMenuText):
	if menuText is None:
		raise ValueError('menuText cannot be None')
	if commands is None:
		raise ValueError('commands cannot be None')

	menuText = forceUnicode(menuText)
	command = {
		"menuText": menuText,
		"commands": forceUnicodeList(commands),
		"tooltipText": forceUnicode(tooltipText or ''),
		"parentMenuText": parentMenuText,
		"id": self._generateSSHCommandId(menuText)
	}

	if needSudo:
		command["needSudo"] = forceBool(needSudo)
	if position:
		command["position"] = forceInt(position)

	return command

def _forceCommandDict(self, c):
	logger.trace('force command dict %s', c)
	c["menuText"] = forceUnicode(c["menuText"])

	if c.get("commands"):
		c["commands"] = forceUnicodeList(c["commands"])
		if not c["commands"]:
			raise ValueError('"commands" needs at least 1 command')
	else:
		raise ValueError('"commands" needs at least 1 command')

	if c.get("position"):
		if not isinstance(c["position"], int):
			raise ValueError('position should be from type int')
		c["position"] = forceInt(c["position"])
	if c.get("needSudo"):
		if not isinstance(c["needSudo"], bool):
			raise ValueError('needSudo should be from type bool')
		c["needSudo"] = forceBool(c["needSudo"])

	for possibleKey in ("id", "tooltipText", "parentMenuText"):
		if c.get(possibleKey):
			c[possibleKey] = forceUnicode(c[possibleKey])

	logger.trace('forced command dict %s', c)

def _writeSSHCommand(self, command, overwrite=False, mode="w"):
	def createCommandDict(c):
		c = forceDict(c)
		c = self._setDefaults(c)
		self._forceCommandDict(c)
		return c

	existingCommands = self.SSHCommand_getObjects()
	exists = False
	logger.debug('_writeSSHCommand overwrite=%s command=%s', overwrite, command)
	for existingCommand in existingCommands:
		if command["menuText"] == existingCommand["menuText"]:
			logger.debug('found command with same menuText ')
			logger.debug('old command: %s', existingCommand)
			logger.debug('new command: %s', command)
			exists = True
			if overwrite:
				for key, value in command.items():
					logger.debug('parsing newCommand: %s:%s', key, value)
					if value:
						if existingCommand[key] == value:
							logger.notice('Not Overwrite key %s (%s) == %s', key, existingCommand[key], value)
						else:
							logger.notice('Overwrite key %s (%s) with %s', key, existingCommand[key], value)
							existingCommand[key] = value
							if existingCommand.get("buildIn"):
								del existingCommand["buildIn"]

	if exists and not overwrite:
		raise ValueError('Command already exists')
	elif not exists:
		try:
			logger.info('Command does not exist. Trying to create.')
			logger.debug('Command {0!r}', command)
			newCom = createCommandDict(command)
			logger.debug('Creating command: {0!r}', newCom)
			existingCommands.append(newCom)
		except Exception as creationError:
			logger.error(creationError, exc_info=True)
			logger.error('error while creating new command: %s', creationError)
	self._writeSSHCommandFileWith(existingCommands)

def _writeSSHCommandFileWith(self, content, mode='w'):
	import codecs
	import json

	with codecs.open(self._getSSHCommandCustomFilename(), mode, 'utf-8') as f:
		try:
			for element in content:
				if element:
					if not element.get("buildIn", False):
						json.dump(element, f)
						f.write('\n')
		except Exception as error:
			logger.error(error, exc_info=True)
			logger.notice('error while writing content: %s', content)
