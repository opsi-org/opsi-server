# -*- coding: utf-8 -*-

def setActionRequestWhereOutdated(self, actionRequest, productId):
	"""
	Set the specified `actionRequest` at every client that has not the
	version of the product with the given `productId` installed.
	The version is compared between the version installed on the client
	and the one available on the depot.

	:return: The IDs of clients where the actionRequest has been set.
	:rtype: set
	"""
	productId = forceProductId(productId)
	actionRequest = forceActionRequest(actionRequest)

	if not self.product_getObjects(id=productId):
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	clientsToUpdate = self.getClientsWithOutdatedProduct(productId)
	for clientId in clientsToUpdate:
		self.setProductActionRequest(productId, clientId, actionRequest)

	return clientsToUpdate

def getClientsWithOutdatedProduct(self, productId):
	"""
	Get clients where the product with id `productId` is outdated.
	This does only take clients into account where the 'installationStatus'
	is set and is neither 'not_installed', 'unknown' nor 'none'.

	:return: The IDs of clients with an outdated version installed.
	:rtype: set
	"""
	from collections import defaultdict

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	updatedClients = set()
	unwantedStatus = frozenset(['not_installed', 'none', 'unknown'])
	for depot, clientIds in depotToClients.items():
		if not clientIds:
			continue

		for productOnDepot in self.productOnDepot_getObjects(productId=productId, depotId=depot):
			logger.debug("Checking %s...", productOnDepot)
			for productOnClient in self.productOnClient_getObjects(clientId=clientIds, productId=productOnDepot.productId):
				if not productOnClient.installationStatus or productOnClient.installationStatus in unwantedStatus:
					logger.debug("Skipping %s", productOnClient)
					continue

				if (productOnClient.productVersion != productOnDepot.productVersion
					or productOnClient.packageVersion != productOnDepot.packageVersion):

					logger.debug("Version difference at %s", productOnClient)
					updatedClients.add(productOnClient.clientId)

	return updatedClients

def setActionRequestWhereOutdatedWithDependencies(self, actionRequest, productId):
	"""
	Set the specified `actionRequest` for the given `productId` and
	dependencies at every client that hasn't got the current version
	installed.
	The version is compared between the version installed on the client
	and the one available on the depot.

	:return: The IDs of clients where the actionRequest has been set.
	:rtype: set
	"""
	productId = forceProductId(productId)
	actionRequest = forceActionRequest(actionRequest)

	if not self.product_getObjects(id=productId):
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	clientsToUpdate = self.getClientsWithOutdatedProduct(productId)
	for clientId in clientsToUpdate:
		self.setProductActionRequestWithDependencies(productId, clientId, actionRequest)

	return clientsToUpdate

def setupWhereNotInstalled(self, productId):
	"""
	Sets the action request for the product with `productId` to 'setup'
	on all clients where the status of the product is not 'installed'.

	The action request will only be set if the depot the client is assigend
	to has a product installed where 'setup' can be set.

	:return: the ID of all clients that have been processed.
	:rtype: set
	"""
	from collections import defaultdict

	productId = forceProductId(productId)

	products = frozenset(self.product_getObjects(id=productId))
	if not products:
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	clientsToSetup = set()
	for pod in self.productOnDepot_getObjects(productId=productId):
		for product in products:
			if (product.packageVersion == pod.packageVersion
				and product.productVersion == pod.productVersion
				and product.getSetupScript()):

				try:
					for clientId in depotToClients[pod.depotId]:
						clientsToSetup.add(clientId)
				except KeyError as notfound:
					logger.debug("%s not found: %s", pod.depotId, notfound)

	if not clientsToSetup:
		logger.info("No clients found where 'setup' is possible.")
		return set()

	logger.debug("Clients possible to 'setup': %s", clientsToSetup)
	clientsWithProductInstalled = set(
		poc.clientId for poc in
		self.productOnClient_getObjects(
			['clientId'],
			productId=productId,
			clientId=clientsToSetup,
			installationStatus='installed'
		)
	)
	clientsToSetup.difference_update(clientsWithProductInstalled)

	logger.debug("Clients to 'setup': %s", clientsToSetup)
	for clientId in clientsToSetup:
		self.setProductActionRequest(productId, clientId, 'setup')

	return clientsToSetup

def updateWhereInstalled(self, productId):
	"""
	Set the product with the id `productId` to 'update' on every client
	where the installation status is 'installed'.

	The action request will only be set if the depot the client is assigend
	to has a product installed where 'update' can be set.

	:return: the ID of all clients that have been processed.
	:rtype: set
	"""
	from collections import defaultdict

	productId = forceProductId(productId)

	products = self.product_getObjects(id=productId)
	if not products:
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError('No product with id {0!r} found'.format(productId))

	clientsWithProductInstalled = set(
		poc.clientId for poc in self.productOnClient_getObjects(
			productId=productId,
			installationStatus='installed'
		)
	)
	if not clientsWithProductInstalled:
		logger.notice('No clients have %s installed.', productId)
		return set()

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	clientsToUpdate = set()
	for product in products:
		logger.debug("Processing %s", product)

		if product.getUpdateScript():
			pods = self.productOnDepot_getObjects(
				productId=product.id,
				productVersion=product.productVersion,
				packageVersion=product.packageVersion
			)

			for depot in (pod.depotId for pod in pods):
				for clientId in (c for c in depotToClients[depot] if c in clientsWithProductInstalled):
					clientsToUpdate.add(clientId)

	logger.debug("Clients to 'update': %s", clientsToUpdate)
	for clientId in clientsToUpdate:
		self.setProductActionRequest(productId, clientId, 'update')

	return clientsToUpdate

def uninstallWhereInstalled(self, productId):
	"""
	Set the product with the id `productId` to 'uninstall' on every client
	where the installation status is 'installed'.

	The action request will only be set if the depot the client is assigend
	to has a product installed where 'uninstall' can be set.

	:return: the ID of all clients that have been processed.
	:rtype: set
	"""
	from collections import defaultdict

	productId = forceProductId(productId)

	products = self.product_getObjects(id=productId)
	if not products:
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	clientsWithProductInstalled = set(poc.clientId for poc in self.productOnClient_getObjects(
		productId=productId,
		installationStatus='installed'
	))
	if not clientsWithProductInstalled:
		logger.notice('No clients have %s installed.', productId)
		return set()

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	clientsToUninstall = set()
	for product in products:
		logger.debug("Processing %s...", product)
		if product.getUninstallScript():
			pods = self.productOnDepot_getObjects(
				productId=product.id,
				productVersion=product.productVersion,
				packageVersion=product.packageVersion
			)

			for depot in (pod.depotId for pod in pods):
				for clientId in (c for c in depotToClients[depot] if c in clientsWithProductInstalled):
					clientsToUninstall.add(clientId)

	logger.debug("Clients to 'uninstall': %s", clientsToUninstall)
	for clientId in clientsToUninstall:
		self.setProductActionRequest(productId, clientId, 'uninstall')

	return clientsToUninstall

def setupWhereInstalled(self, productId):
	"""
	Set the product with the id `productId` to 'setup' on every client
	where the installation status is 'installed'.

	The action request will only be set if the depot the client is assigend
	to has a product installed where 'setup' can be set.

	:return: the ID of all clients that have been processed.
	:rtype: set
	"""
	from collections import defaultdict
	from OPSI.Object import ProductOnClient

	productId = forceProductId(productId)

	products = self.product_getObjects(id=productId)
	if not products:
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	clientsWithProductInstalled = set(poc.clientId for poc in self.productOnClient_getObjects(
		productId=productId,
		installationStatus='installed'
	))
	if not clientsWithProductInstalled:
		logger.notice('No clients have %s installed.', productId)
		return set()

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	productType = None
	clientsToSetup = set()
	for product in products:
		productType = product.getType()
		logger.debug("Processing %s...", product)
		if product.getSetupScript():
			pods = self.productOnDepot_getObjects(
				productId=product.id,
				productVersion=product.productVersion,
				packageVersion=product.packageVersion
			)

			for depot in (pod.depotId for pod in pods):
				for clientId in (c for c in depotToClients[depot] if c in clientsWithProductInstalled):
					clientsToSetup.add(clientId)

	logger.debug("Clients to 'setup': %s", clientsToSetup)
	for clientId in clientsToSetup:
		self.productOnClient_updateObjects(
			ProductOnClient(
				productId=productId,
				productType=productType,
				clientId=clientId,
				actionRequest='setup'
			)
		)

	return clientsToSetup

def setupWhereFailed(self, productId):
	"""
	Set the product with the id `productId` to 'setup' on every client
	where the action result is 'failed'.

	The action request will only be set if the depot the client is assigend
	to has a product installed where 'setup' can be set.

	:return: the ID of all clients that have been processed.
	:rtype: set
	"""
	from collections import defaultdict
	from OPSI.Object import ProductOnClient

	productId = forceProductId(productId)

	products = self.product_getObjects(id=productId)
	if not products:
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with id {0!r}".format(productId))

	clientsWithFailedProduct = set(poc.clientId for poc in self.productOnClient_getObjects(
		productId=productId,
		actionResult='failed'
	))
	if not clientsWithFailedProduct:
		logger.notice('No clients have %s with installation status "failed".', productId)
		return set()

	depotToClients = defaultdict(set)
	for clientToDepot in self.configState_getClientToDepotserver():
		depotToClients[clientToDepot['depotId']].add(clientToDepot['clientId'])

	productType = None
	clientsToSetup = set()
	for product in products:
		productType = product.getType()

		logger.debug("Processing %s...", product)
		if product.getSetupScript():
			pods = self.productOnDepot_getObjects(
				productId=product.id,
				productVersion=product.productVersion,
				packageVersion=product.packageVersion
			)

			for depot in (pod.depotId for pod in pods):
				for clientId in (c for c in depotToClients[depot] if c in clientsWithFailedProduct):
					clientsToSetup.add(clientId)

	logger.debug("Clients to 'setup': %s", clientsToSetup)
	for clientId in clientsToSetup:
		self.productOnClient_updateObjects(
			ProductOnClient(
				productId=productId,
				productType=productType,
				clientId=clientId,
				actionRequest='setup'
			)
		)

	return clientsToSetup
