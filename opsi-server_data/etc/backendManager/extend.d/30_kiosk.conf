# -*- coding: utf-8 -*-


def getKioskProductInfosForClient(self, clientId, addConfigs=False):
	"""
	Collect the data as required by the opsi kiosk client.

	:param clientId: ID of the client for whom the data gets collected.
	:type clientId: str
	:param addConfigs: If True configStates will be returned. Returns a dict.
	:type addConfigs: bool
	:rtype: list of dicts
	:raises BackendMissingDataError: If no client with clientId exists.
	:raises RuntimeError: In case something goes wrong.
	"""
	from OPSI.Types import forceBool

	hosts = self.host_getIdents(id=clientId, type="OpsiClient")
	try:
		clientId = hosts.pop()  # get first element
	except IndexError:
		from OPSI.Exceptions import BackendMissingDataError
		raise BackendMissingDataError("Unknown host {0!r}".format(clientId))

	try:
		softwareOnDemandGroups = self._getSoftwareOnDemandGroups(clientId)
		productIds = set(x.objectId for x in self.objectToGroup_getObjects(groupId=softwareOnDemandGroups, groupType="ProductGroup"))
		depotId = self.getDepotId(clientId)
		productOnDepots = {p.productId: p for p in self.productOnDepot_getObjects(depotId=depotId, productId=productIds)}
		productDependencies = self.productDependency_getObjects(productId=productIds)
		productOnClients = {poc.productId: poc for poc in self.productOnClient_getObjects(clientId=clientId, productId=productIds)}
		products = self.product_getObjects(id=productIds)

		if addConfigs:
			from OPSI.Backend.Backend import temporaryBackendOptions

			with temporaryBackendOptions(self, addConfigStateDefaults=True):
				configDataRecords = {
					config.configId: config.getValues()
					for config in self.configState_getObjects(
						configId=["software-on-demand.*"],
						objectId=clientId
					)
				}
	except Exception as error:
		logger.error(error, exc_info=True)
		raise RuntimeError("Collecting kiosk data failed: {0}".format(error))

	products_result = []
	for productId in productIds:
		try:
			pod = productOnDepots[productId]
		except KeyError:
			logger.debug("Missing product %s on depot %s.", productId, depotId)
			continue

		productDataRecord = {
			'productId': productId,
			'productVersion': pod.productVersion,
			'packageVersion': pod.packageVersion,
			'versionStr': "%s-%s" % (pod.productVersion, pod.packageVersion),
			'installedVerStr': "",
			'installedProdVer': "",
			'installedPackVer': "",
			'updatePossible': False,
			'possibleAction': "",
			'installationStatus': "",
			'actionRequest': "",
			'actionResult': "",
		}

		requirements = []
		for dep in productDependencies:
			if dep.productId != productId:
				continue

			requirement = {
				"requiredProductId": dep.requiredProductId,
				"required": "",
				"preRequired": "",
				"postRequired": "",
			}

			if dep.requirementType == "before":
				destination = "prerequired"
			elif dep.requirementType == "after":
				destination = "postrequired"
			else:
				destination = "required"

			if dep.requiredAction:
				requirement[destination] = dep.requiredAction
			elif dep.requiredInstallationStatus:
				requirement[destination] = dep.requiredInstallationStatus
			requirements.append(requirement)
		productDataRecord['requirements'] = requirements

		for prod in products:
			if prod.id != productId or prod.productVersion != productDataRecord['productVersion'] or prod.packageVersion != productDataRecord['packageVersion']:
				continue

			productDataRecord['hasSetup'] = forceBool(prod.setupScript)
			productDataRecord['hasUninstall'] = forceBool(prod.uninstallScript)
			productDataRecord['productName'] = prod.name
			productDataRecord['description'] = prod.description
			productDataRecord['advice'] = prod.advice
			productDataRecord['priority'] = prod.priority
			productDataRecord['productType'] = prod.getType()

			break

		try:
			poc = productOnClients[productId]
			productDataRecord['installationStatus'] = poc.installationStatus
			productDataRecord['actionRequest'] = poc.actionRequest
			productDataRecord['actionResult'] = poc.actionResult
			productDataRecord['installedProdVer'] = poc.productVersion
			productDataRecord['installedPackVer'] = poc.packageVersion
			productDataRecord['installedVerStr'] = "%s-%s" % (poc.productVersion, poc.packageVersion)
			productDataRecord['updatePossible'] = bool(productDataRecord['installedVerStr'] != productDataRecord['versionStr'])

			if poc.installationStatus == 'not_installed' and productDataRecord['hasSetup']:
				productDataRecord['possibleAction'] = 'setup'
			elif poc.installationStatus == 'installed' and productDataRecord['hasUninstall']:
				productDataRecord['possibleAction'] = 'uninstall'
		except KeyError as kerr:
			logger.debug(
				"Unable to find product %s on client %s: %s",
				productId, clientId, kerr
			)

		products_result.append(productDataRecord)

	if addConfigs:
		return {"configStates": configDataRecords, "products": products_result}

	return products_result


def _getSoftwareOnDemandGroups(self, clientId):
	"""
	Get the software-on-demand groups for the given client.

	:param clientId: The ID of the client to check for.
	:type clientId: str
	:return: The software-on-demand groups set for the client.
	:rtype: set([str, ...])
	"""
	from OPSI.Backend.Backend import temporaryBackendOptions

	groups = set()
	with temporaryBackendOptions(self._backend, addConfigStateDefaults=True):
		for configState in self.configState_getObjects(configId='software-on-demand.product-group-ids', objectId=clientId):
			for groupId in configState.getValues():
				for splitGroupId in groupId.split(','):
					groups.add(splitGroupId)

	return groups
