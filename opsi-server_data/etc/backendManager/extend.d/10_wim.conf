# -*- coding: utf-8 -*-

def updateWIMConfig(self, productId):
	"""
	Update the configuration of a Windows netboot product based on the \
information in it's install.wim.

	IMPORTANT: This does only work on the configserver!
	"""
	import os.path
	from OPSI.Types import forceProductId
	from OPSI.Util import getfqdn

	if not productId:
		raise ValueError("Missing productId: {0!r}".format(productId))

	productId = forceProductId(productId)

	if not self.product_getObjects(id=productId):
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product with ID {0!r}".format(productId))

	depotId = getfqdn()
	if not self.productOnDepot_getObjects(depotId=depotId, productId=productId):
		from OPSI.Exceptions import BackendMissingDataError

		raise BackendMissingDataError("No product {0!r} on {1!r}".format(productId, depotId))

	depot = self.host_getObjects(id=depotId, type="OpsiDepotserver")
	depot = depot[0]
	logger.debug("Working with %s", depot)

	depotPath = depot.depotLocalUrl
	if not depotPath.startswith('file://'):
		raise ValueError("Unable to handle the depot remote local url {0!r}.".format(depotPath))

	depotPath = depotPath[7:]
	logger.debug("Created path %s", depotPath)
	productPath = os.path.join(depotPath, productId)
	wimSearchPath = os.path.join(productPath, 'installfiles', 'sources')

	for filename in ('install.wim', 'install.esd'):
		wimPath = os.path.join(wimSearchPath, filename)

		if os.path.exists(wimPath):
			logger.debug("Found image file %s", filename)
			break
	else:
		raise IOError("Unable to find install.wim / install.esd in {0!r}".format(wimSearchPath))

	self.updateWIMConfigFromPath(wimPath, productId)

def updateWIMConfigFromPath(self, path, targetProductId):
	"""
	Update the configuration of `targetProductId` based on the \
information in the install.wim at the given `path`.

	IMPORTANT: This does only work on the configserver!
	"""
	import itertools
	from OPSI.Util.WIM import parseWIM, writeImageInformation

	images = parseWIM(path)

	if targetProductId:
		defaultLanguage = set([image.default_language for image in images if image.default_language])
		if 1 == len(defaultLanguage):
			defaultLanguage = defaultLanguage.pop()
		else:
			if len(defaultLanguage) > 1:
				logger.info("Multiple default languages: %s", defaultLanguage)
				logger.info("Not setting a default.")
			else:
				logger.info("Unable to find a default language.")

			defaultLanguage = None

		writeImageInformation(self, targetProductId, [image.name for image in images],
								list(set(itertools.chain(*[image.languages for image in images if image.languages]))),
								defaultLanguage)
